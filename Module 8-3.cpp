/*Задание 3. Игрушечная история
Что нужно сделать
Вы решили открыть бизнес по производству игровых деревянных кубиков для детей. Вы узнали, что лучше всего продаются кубики со стороной 5 см в наборах по несколько штук, 
причём кубиков в наборе должно быть достаточно, чтобы сложить из них один большой куб. Для изготовления кубиков к вам в мастерскую 
поступают деревянные бруски в форме прямоугольных параллелепипедов любых размеров.

Для оптимизации бизнес-процессов напишите программу, которая по заданным размерам исходного бруска определяет, сколько кубиков из него можно изготовить,
можно ли из них составить набор для продажи и если можно, то максимальное число кубиков в этом наборе. 
Все кубики должны быть из цельного дерева без использования клея. Размеры бруска — вещественные числа. Обеспечьте контроль ввода.

Например:

Из бруска 20x35x5 можно изготовить 28 кубиков.

Из 28 кубиков можно собрать набор из 27 кубиков.

Пример выполнения

Введите размеры бруска:

X: 5

Y: 35,76

Z: 35,05

Вывод:

Из этого бруска можно изготовить 49 кубиков.

Из них можно составить набор из 27 кубиков.

Рекомендации по выполнению
Кубики изготавливаются только цельными, не из нескольких частей бруска. Минимальный размер бруска — 5x5x5 см. Подумайте как проще разбить брусок на такие кубики.
Минимальный размер набора — 2x2x2 = 8 кубиков.
Что оценивается
Правильно считается количество кубиков, которое можно получить из бруска.
Количество кубиков в наборе не превышает количество кубиков, полученное из бруска.*/

#include <cmath>
#include <iostream>
#include <cfloat>
#include <Windows.h>


int main() {

    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    //минимальные размеры заготовки
    float minX = 5.0f, minY = 5.0f, minZ = 5.0f;

    //минимальные размеры набора
    int  minSet = 8;

    std::cout << "Введите размеры бруска (в сатиметрах)" << std::endl;
    std::cout << "X: ";
    float xWorkPiece;
    std::cin >> xWorkPiece;
    while (xWorkPiece < minX) {
        std::cout << "Рзамер должен быть больше или равен 5 см. Введите снова: ";
        std::cin >> xWorkPiece;
    }

    std::cout << "Y: ";
    float yWorkPiece;
    std::cin >> yWorkPiece;
    while (yWorkPiece < minY) {
        std::cout << "Рзамер должен быть больше или равен 5 см. Введите снова: ";
        std::cin >> yWorkPiece;
    }

    std::cout << "Z: ";
    float zWorkPiece;
    std::cin >> zWorkPiece;
    while (zWorkPiece < minZ) {
        std::cout << "Рзамер должен быть больше или равен 5 см. Введите снова: ";
        std::cin >> zWorkPiece;
    }
    
    // подсчитываем количество кубиков которые можно сделать из заготовки
    int quantityCube = ((int)xWorkPiece / 5) * ((int)yWorkPiece / 5) * ((int)zWorkPiece / 5);

    if (quantityCube < minSet) {
        std::cout << "Количество кубиков которые можно изготовить из этого бруска - " << quantityCube << " шт. Из них не получиться составить не один набор для продажи." << std::endl;
    }
    else {
        // количество кубиков в одной стороне набора
        int edgeCubeSet = std::cbrt(quantityCube);

        // количество кубиков в наборе
        int quantityCubeSet = std::pow(edgeCubeSet, 3);

        std::cout << "Количество кубиков которые можно изготовить из этого бруска - " << quantityCube << " шт." << std::endl;
        std::cout << "Количество наборов по " << quantityCubeSet << " кубиков, которое можно составить из них будет - " << quantityCube / quantityCubeSet << " шт." << std::endl;
    }

}
